#!/usr/bin/env python
#
# ==============================
# Copyright 2011 Whamcloud, Inc.
# ==============================

import sys
import os
bin_dir = os.path.abspath(os.path.dirname(sys.modules['__main__'].__file__))
project_dir = "/" + os.path.join(*(bin_dir.split(os.sep)[0:-2]))
sys.path.append(project_dir)

from django.core.management import setup_environ
import settings
setup_environ(settings)

import signal
import os
import threading
import time

from chroma_core.lib.storage_plugin.log import storage_plugin_log

class ServiceThread(threading.Thread):
    def __init__(self, service):
        super(ServiceThread, self).__init__()
        self.service = service
        self.daemon_rpc = DaemonRpc(daemon)

    def run(self):
        try:
            self.service.main_loop()
        except Exception:
            import sys
            import traceback
            exc_info = sys.exc_info()
            backtrace = '\n'.join(traceback.format_exception(*(exc_info or sys.exc_info())))
            storage_plugin_log.warning("Exception in main loop.  backtrace: %s" % backtrace)
            os._exit(-1)

    def stop(self):
        self.service.stop()


if __name__ == '__main__':
    from chroma_core.lib.storage_plugin.daemon import StorageDaemon, DaemonRpc, AgentPluginDaemon
    daemon = StorageDaemon()

    storage_daemon = StorageDaemon()
    storage_daemon_thread = ServiceThread(storage_daemon)
    rpc_thread = ServiceThread(DaemonRpc(storage_daemon))
    agent_daemon_thread = ServiceThread(AgentPluginDaemon())
    threads = [storage_daemon_thread, agent_daemon_thread, rpc_thread]
    for thread in threads:
        thread.start()

    stopping = []

    # Respond to Ctrl+C
    def signal_handler(signal, frame):
        storage_plugin_log.info("__main__: Stopping...")
        for thread in threads:
            thread.stop()
        storage_plugin_log.info("__main__: Joining...")
        for thread in threads:
            thread.join()
        storage_plugin_log.info("__main__: Done.")
        stopping.append(True)
    signal.signal(signal.SIGINT, signal_handler)

    while len(stopping) == 0:
        time.sleep(1)
