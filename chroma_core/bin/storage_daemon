#!/usr/bin/env python
#
# ==============================
# Copyright 2011 Whamcloud, Inc.
# ==============================

import sys
import os
bin_dir = os.path.abspath(os.path.dirname(sys.modules['__main__'].__file__))
project_dir = "/" + os.path.join(*(bin_dir.split(os.sep)[0:-2]))
sys.path.append(project_dir)

from django.core.management import setup_environ
import settings
setup_environ(settings)

import signal
import os
import threading

from chroma_core.lib.storage_plugin.log import storage_plugin_log

class RpcThread(threading.Thread):
    def __init__(self, daemon):
        super(RpcThread, self).__init__()
        self.daemon_rpc = DaemonRpc(daemon)

    def run(self):
        self.daemon_rpc.main_loop()

    def stop(self):
        self.daemon_rpc.stop()
        self.join()

if __name__ == '__main__':
    from chroma_core.lib.storage_plugin.daemon import StorageDaemon, DaemonRpc
    daemon = StorageDaemon()

    # Start a thread for handling RPCs
    rpc_thread = RpcThread(daemon)
    rpc_thread.start()

    # Respond to Ctrl+C
    def signal_handler(signal, frame):
        storage_plugin_log.info("__main__: Stopping...")
        rpc_thread.stop()
        daemon.stop()
    signal.signal(signal.SIGINT, signal_handler)

    try:
        daemon.main_loop()
    except Exception, e:
        import sys
        import traceback
        exc_info = sys.exc_info()
        backtrace = '\n'.join(traceback.format_exception(*(exc_info or sys.exc_info())))
        storage_plugin_log.warning("Exception in main loop.  backtrace: %s" % backtrace)
        os._exit(-1)


