#!/usr/bin/env ruby
$:.unshift File.dirname(__FILE__)

require 'trollop'
require 'rubygems'
begin
  require 'ohai'
rescue LoadError => e
  class Ohai
    class System < Hash
      def initialize
        super
        self[:platform] = 'no_ohai'
        self[:platform_version] = 'no_ohai'
        self[:kernel] = {:machine => `uname -m`.chomp}
      end

      def all_plugins
      end
    end
  end
end

def build_ok?(dir, ohai)
  return false unless File.directory?(dir)

  # Try matching against the generic "el" platform name first,
  # otherwise see if there was a specific platform match.
  if %w{centos redhat}.include?(ohai[:platform])
    tmp = ohai.clone
    tmp[:platform] = "el"
    return true if build_ok?(dir, tmp)
  end

  # e.g. x86_64
  arch = ohai[:kernel][:machine]
  # e.g. redhat
  platform = ohai[:platform]
  # e.g. redhat-x86_64
  platform_arch = "#{platform}-#{arch}"
  # e.g. redhat-5
  platform_maj = "#{platform}-" + ohai[:platform_version].to_f.to_i.to_s
  # e.g. redhat-5-x86_64
  platform_maj_arch = "#{platform_maj}-#{arch}"
  # e.g. redhat-5.6
  platform_maj_min = "#{platform}-" + ohai[:platform_version]
  # e.g. redhat-5.6-i386
  platform_maj_min_arch = "#{platform_maj_min}-" + ohai[:kernel][:machine]

  [arch, platform, platform_arch, platform_maj, platform_maj_arch,
   platform_maj_min, platform_maj_min_arch].each do |test|
    return true if File.exist?(File.join(dir, ".#{test}"))
  end

  false
end

CACHE="/tmp/#{File.basename(__FILE__)}.cache"

if File.exists? CACHE and Ohai::System.respond_to?(:json_create)
  ohai = Ohai::System.json_create(JSON.parse(IO.read(CACHE)))
else 
  ohai = Ohai::System.new
  ohai.all_plugins
  unless ohai[:fqdn].nil?
    File.open(CACHE, "w") do |file|
      file.puts ohai.to_json
    end
  end
end

Opts = Trollop::options do
  opt :name, "Platform Name", :type => :flag
  opt :release, "Platform Version", :type => :flag
  opt :buildok, "Check For Platform Build Flag", :type => :string
end

# TODO: make this a bit more sophisticated
if Opts[:name]
  puts ohai[:platform]
elsif Opts[:release]
  puts ohai[:platform_version]
elsif Opts[:buildok]
  puts build_ok?(Opts[:buildok], ohai) ? "true" : "false"
end
