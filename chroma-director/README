
create a local_settings.py like this:

AWS_KEY_ID='' # From your 'security credentials -> access keys' page
AWS_SECRET='' # From your 'security credentials -> access keys' page
AWS_SSH_KEY = 'jcs-aws-key' # An AWS keypair name
AWS_SSH_PRIVATE_KEY = '/Users/jcspray/ec2/jcs-aws-key.pem' # a local path

create a virtualenv and do a pip install -r requirements.txt

run ./manage.py syncdb --migrate --noinput

Create AMIs from the manager and storage instances.  Each of these
will take several minutes.

 ./manage.py create_manager_image
 ./manage.py create_storage_image

Both of these commands are unusual in that they don't save their local
state in the database. They each append he appropriate config statement to
local-settings.py.  This makes it easier to tweak the settings -
particularly useful if you want to change the instance type. 

make sure you have the required two security groups in your AWS account:
chroma-manager (ports 22, 80, 514)
chroma-appliance  (port 22, 988)

./manage.py new_cluster
 (create one manager, one appliance, and add the appliance to the manager)
./manage.py clusters
 (get a list of your instances with their local IDs)
./manage.py new_cluster recover <local id>
 (when some instances have been created, try to set them up again e.g. if something
 went wrong and you've fixed it now)
./manage.py clusters terminate all
 (remove all the locally-known instances, i.e. those created with director)
./manage.py clusters terminate <manager-id>
 (remove the manager and assocated storage nodes)
./manage.py clusters terminate all
 (remove all the locally-known instances, i.e. those created with director)
./manage.py clusters ssh <manager-id>
 (open an ssh session to a ChromaManager by its local ID)

./manage.py nodes
   list all instances by local ids
./manage.py nodes ssh <id>
   open ssh connection to instance
./manage.py nodes terminate <id>
   destroy specified instance and all attached storage
./manage.py nodes terminate all
   you die, she dies, everybody dies
./manage.py new_image <id> <name>
   create AMI based on the specified instance

Notes:

* aliases are assigned to the instances, and /etc/hosts is updated on
  all the nodes.  The manager is called "chroma" and the storage nodes are called
  node01, node02, etc.
