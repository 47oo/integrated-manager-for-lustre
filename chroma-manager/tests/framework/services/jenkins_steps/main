#!/bin/bash -e

PROVISIONER=${PROVISIONER:-"ssh chromatest@autotest ./provisionchroma -v -S"}

. chroma-manager/tests/framework/utils/defaults.sh

export CLUSTER_CONFIG_TEMPLATE=${CLUSTER_CONFIG_TEMPLATE:-"chroma/chroma-manager/tests/framework/services/services_cluster_config.json"}

# Get the chroma-externals repo as pip is going to need it
. scripts/update_chroma-externals.sh

cd $WORKSPACE/chroma_test_env/chroma/chroma-manager
make requirements
python tests/utils/pip_install_requirements.py $(pwd)/../chroma-externals

# Release the provisioned cluster (at the exit of this script)
trap "chroma/chroma-manager/tests/framework/utils/provisioner_interface/release_cluster" EXIT

cd $WORKSPACE/chroma_test_env
chroma/chroma-manager/tests/framework/utils/provisioner_interface/provision_cluster

eval $(python chroma/chroma-manager/tests/utils/json_cfg2sh.py "$CLUSTER_CONFIG")

pdsh -R ssh -l root -S -w $CHROMA_MANAGER $TEST_RUNNER "exec 2>&1; set -xe
cd /etc/yum.repos.d/
for f in *.repo; do
  sed -i -e 's/distro=rhel6.5/distro=el6.4/' -e 's/distro=el6.5/distro=el6.4/' -e 's/http:\/\/jenkins-pull/https:\/\/jenkins-pull/g' \$f
done" | dshbak -c
if [ ${PIPESTATUS[0]} != 0 ]; then
    exit 1
fi

# we should get the cluster fully configured from the provisioner, but we don't
ssh root@$CHROMA_MANAGER <<EOF
set -ex
# Install non-python/pipable dependencies
cat <<EOC > /etc/yum.repos.d/internal_epel.repo
[addon-epel6-x86_64]
name=addon-epel6-x86_64
baseurl=http://cobbler/cobbler/repo_mirror/EPEL-6-x86_64
enabled=1
gpgcheck=0
priority=99
EOC
yum install -y python-virtualenv
yum-config-manager --disable addon-epel6-x86_64
# Disable EPEL
yum-config-manager --disable EPEL-6-x86_64
EOF

echo "Beginning automated test run..."
chroma/chroma-manager/tests/framework/services/cluster_setup
chroma/chroma-manager/tests/framework/services/run_tests
echo "Automated test run complete."

# Combine coverage reports from the different nodes.
if $MEASURE_COVERAGE; then
  echo "
[paths]
source1 =
    $WORKSPACE/chroma/
    /home/chromatest/chroma_test_env/chroma/

[report]
include =
    $WORKSPACE/chroma/*
omit =
    *junk.py
    */tests/*
" > .coveragerc

  coverage combine
  coverage report -m
  coverage xml --ignore-errors
fi
