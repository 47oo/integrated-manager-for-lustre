#!/bin/bash -ex

. chroma-manager/tests/framework/integration/utils/defaults.sh

SLAVE=${slave:?"Need to set slave"}

cd $WORKSPACE
set +x  # DONT REMOVE/COMMENT or you will risk exposing the jenkins-pull api token in the console logs.
curl -f -k -O -u $JENKINS_USER:$JENKINS_PULL "$JOB_URL/chroma-bundles/ieel-$IEEL_VERSION.tar.gz"
set -x

sed -i -e "s/BUILD_JOB_NAME/${BUILD_JOB_NAME}/g" \
       -e "s/BUILD_JOB_BUILD_NUMBER/${BUILD_JOB_BUILD_NUMBER}/g" \
       -e "s/TEST_DISTRIBUTION/${TEST_DISTRIBUTION}/g" \
       chroma/chroma-manager/tests/framework/integration/shared_storage_configuration/full_cluster/shared_storage_configuration_cluster_cfg.json

python chroma/chroma-manager/tests/framework/utils/provisioner_interface/test_json2provisioner_json.py chroma/chroma-manager/tests/framework/integration/shared_storage_configuration/full_cluster/shared_storage_configuration_cluster_cfg.json provisioner_input.json

if [ "$SLAVE" = "rhel6&&ssi" ]; then
    sed -i -e 's/el6/rhel6/g' provisioner_input.json
fi
cat provisioner_input.json
echo

# Gather logs from nodes and release the cluster at exit
cleanup() {
    set -x
    set +e
    if $got_aborted; then
        tmpfile=/tmp/abort.$$.debug
        exec 2>/tmp/tmpfile
    fi
    python chroma/chroma-manager/tests/integration/utils/chroma_log_collector.py $WORKSPACE/test_logs shared_storage_configuration_cluster_cfg.json | tee $WORKSPACE/log_collector_out 2>&1 || true
    sed -e 's/provision": *true/provision": false/' < provisioner_output.json | $PROVISIONER || true
    echo "exit trap done"
    if [ -n "$tmpfile" -a -e "$tmpfile" ]; then
        cat $tmpfile | mail -s "job aborted" brian.murrell@intel.com
        rm $tmpfile || true
    fi
}

got_aborted=false
trap cleanup EXIT

trap "set -x
got_aborted=true
echo \"Got SIGTERM\"
ps axf
exit 1" TERM

if ! cat provisioner_input.json | $PROVISIONER > provisioner_output.json ||
   [ ! -s provisioner_output.json ] ||
   grep '"success": false' provisioner_output.json; then
    echo "Cluster provisioner failed"
    cat provisioner_output.json
    exit 1
else
    cat provisioner_output.json
    echo
fi

python chroma/chroma-manager/tests/framework/utils/provisioner_interface/provisioner_json2test_json.py provisioner_output.json shared_storage_configuration_cluster_cfg.json
cat shared_storage_configuration_cluster_cfg.json
echo

# see if this cures the 401 errors from jenkins
eval $(python chroma/chroma-manager/tests/utils/json_cfg2sh.py shared_storage_configuration_cluster_cfg.json)
pdsh -R ssh -l root -S -w $(spacelist_to_commalist ${STORAGE_APPLIANCES[@]} ${WORKERS[@]} $CHROMA_MANAGER $TEST_RUNNER) "exec 2>&1; set -xe
if [ -f /etc/yum.repos.d/autotest.repo ]; then
    set +x
    sed -i -e 's/Aitahd9u/$JENKINS_PULL/g' /etc/yum.repos.d/autotest.repo
    set -x
fi
cd /etc/yum.repos.d/
for f in *.repo; do
  sed -i -e 's/distro=el6.[0-9]/distro=el6.4/' \$f
done" | dshbak -c
if [ ${PIPESTATUS[0]} != 0 ]; then
    exit 1
fi

echo "Beginning automated test run..."
export MEASURE_COVERAGE=$MEASURE_COVERAGE
chroma/chroma-manager/tests/framework/integration/upgrade_os/cluster_setup
chroma/chroma-manager/tests/framework/integration/upgrade_os/run_tests
echo "Automated test run complete."

# Combine coverage reports from the different nodes.
if $MEASURE_COVERAGE; then
  ls .coverage*
  echo "
[paths]
source1 =
    $WORKSPACE/chroma/chroma-manager/
    /usr/share/chroma-manager/
source2 =
    $WORKSPACE/chroma/chroma-agent/chroma_agent/
    /usr/lib/python2.6/site-packages/chroma_agent/

[report]
include =
    $WORKSPACE/chroma/*
omit =
    *junk.py
    */tests/*
" > .coveragerc

  coverage combine
  coverage report -m
  coverage xml --ignore-errors
fi
