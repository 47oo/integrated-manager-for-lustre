#!/bin/bash -ex

PROVISIONER=${PROVISIONER:-"ssh chromatest@autotest ./provisionchroma -v -S"}

. chroma-manager/tests/framework/utils/defaults.sh

export CLUSTER_CONFIG_TEMPLATE=${CLUSTER_CONFIG_TEMPLATE:-"chroma/chroma-manager/tests/framework/gui/selenium_cluster_config.json"}

#--------------------------------------------------------------------------
# Get the chroma-externals repo as pip is going to need it
#--------------------------------------------------------------------------
scripts/update_chroma-externals.py

#--------------------------------------------------------------------------
# Fetch the IEEL installation package from the upstream job
#--------------------------------------------------------------------------
cd $WORKSPACE
set +x  # DONT REMOVE/COMMENT or you will risk exposing the jenkins-pull api token in the console logs.
curl -k -O -u $JENKINS_USER:$JENKINS_PULL "$JOB_URL/chroma-bundles/ieel-$IEEL_VERSION.tar.gz"
set -x
ls ieel-*.tar.gz

#-----------------------------------------------
# Installing dependencies via pip
#-----------------------------------------------
cd $WORKSPACE/chroma_test_env/chroma/chroma-manager
make requirements
python tests/utils/pip_install_requirements.py $(pwd)/../chroma-externals

#-------------------------------------------------------------
# Release the provisioned cluster (at the exit of this script)
#-------------------------------------------------------------
trap "set +e
cd $WORKSPACE/chroma_test_env/
chroma/chroma-manager/tests/framework/gui/collect_logs.sh

cd $WORKSPACE/chroma_test_env
chroma/chroma-manager/tests/framework/utils/provisioner_interface/release_cluster" EXIT

#--------------------------------
# Provision a node
#--------------------------------
cd $WORKSPACE/chroma_test_env/
chroma/chroma-manager/tests/framework/utils/provisioner_interface/provision_cluster

# --------------------------------------------------------------------
# Fix up the chroma repo URL (distro=el6.3 should just be "distro=el6)
# --------------------------------------------------------------------
eval $(python chroma/chroma-manager/tests/utils/json_cfg2sh.py "$CLUSTER_CONFIG")
ssh root@$CHROMA_MANAGER "set -xe
sed -i -e 's/\(distro=el6\).3\//\1\//' -e \"s/Aitahd9u/$JENKINS_PULL/g\"  -e 's/http:\/\/jenkins-pull/https:\/\/jenkins-pull/g' /etc/yum.repos.d/autotest.repo
cd /etc/yum.repos.d/
for f in *.repo; do
  sed -i -e 's/distro=[^\/][^\/]*/distro=el6.4/' \$f
done
yum --disablerepo=\* --enablerepo=chroma makecache
# Disable EPEL
yum-config-manager --disable EPEL-6-x86_64"

#---------------------------
# Install Chroma on the node
#---------------------------
GOOGLE_REPO="http://cobbler/cobbler/repo_mirror/google_chrome-stable-x86_64" \
chroma/chroma-manager/tests/framework/gui/cluster_setup

#-----------------------
# Run the selenium tests
#-----------------------
chroma/chroma-manager/tests/framework/gui/run_tests

#-------------------------
# Process coverage reports
#-------------------------
if $MEASURE_COVERAGE; then
  cd $WORKSPACE
  ls .coverage*
echo "
[paths]
source =
    $WORKSPACE/chroma_test_env/chroma/chroma-manager/
    /usr/share/chroma-manager/

[report]
include =
    $WORKSPACE/chroma_test_env/chroma/*
    /usr/share/chroma-manager/*
omit =
    *junk.py
    */tests/*
" > .coveragerc

  coverage combine
  coverage report -m
  coverage xml --ignore-errors
fi
