#!/bin/bash -ex

PROVISIONER=${PROVISIONER:-"ssh chromatest@autotest ./provisionchroma -v -S"}

. chroma-manager/tests/framework/integration/utils/defaults.sh

#--------------------------------------------------------------------------
# Get the chroma-externals repo as pip is going to need it
#--------------------------------------------------------------------------
scripts/update_chroma-externals.py

#--------------------------------------------------------------------------
# Fetch the IEEL installation package from the upstream job
#--------------------------------------------------------------------------
cd $WORKSPACE
set +x  # DONT REMOVE/COMMENT or you will risk exposing the jenkins-pull api token in the console logs.
curl -k -O -u $JENKINS_USER:$JENKINS_PULL "$JOB_URL/chroma-bundles/ieel-$IEEL_VERSION.tar.gz"
set -x
ls ieel-*.tar.gz

#-----------------------------------------------
# Installing dependencies via pip
#-----------------------------------------------
cd $WORKSPACE/chroma_test_env/chroma/chroma-manager
make requirements
python tests/utils/pip_install_requirements.py $(pwd)/../chroma-externals

#-------------------------------------------------------------
# Release the provisioned cluster (at the exit of this script)
#-------------------------------------------------------------
trap "set +e
set -x
cd $WORKSPACE/chroma_test_env/ && WORKSPACE=$WORKSPACE \
CLUSTER_CONFIG=selenium_cluster_config.json \
MEASURE_COVERAGE=$MEASURE_COVERAGE \
chroma/chroma-manager/tests/framework/gui/collect_logs.sh || true

cd $WORKSPACE/chroma_test_env && \
sed -e 's/provision\": *true/provision\": false/g' < provisioner_output.json | $PROVISIONER" EXIT

#--------------------------------
# Provision a node
#--------------------------------
cd $WORKSPACE/chroma_test_env/
sed -i -e "s/BUILD_JOB_NAME/${BUILD_JOB_NAME}/g" \
       -e "s/BUILD_JOB_BUILD_NUMBER/${BUILD_JOB_BUILD_NUMBER}/g" \
       -e "s/TEST_DISTRIBUTION/${TEST_DISTRIBUTION}/g" \
       chroma/chroma-manager/tests/framework/gui/selenium_cluster_config.json
python chroma/chroma-manager/tests/framework/utils/provisioner_interface/test_json2provisioner_json.py chroma/chroma-manager/tests/framework/gui/selenium_cluster_config.json provisioner_input.json
cat provisioner_input.json | $PROVISIONER > provisioner_output.json
cat provisioner_input.json

if ! grep '"success":true' provisioner_output.json; then
    echo "Cluster provisioner failed"
    cat provisioner_output.json
    exit 1
fi
echo

python chroma/chroma-manager/tests/framework/utils/provisioner_interface/provisioner_json2test_json.py provisioner_output.json selenium_cluster_config.json
cat selenium_cluster_config.json

#---------------------------
# Install Chroma on the node
#---------------------------
CLUSTER_CONFIG=selenium_cluster_config.json \
MEASURE_COVERAGE=$MEASURE_COVERAGE \
chroma/chroma-manager/tests/framework/gui/cluster_setup

#-----------------------
# Run the selenium tests
#-----------------------
WORKSPACE=$WORKSPACE \
CLUSTER_CONFIG=selenium_cluster_config.json \
MEASURE_COVERAGE=$MEASURE_COVERAGE \
chroma/chroma-manager/tests/framework/gui/run_tests