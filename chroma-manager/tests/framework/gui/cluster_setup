#!/bin/bash -ex

[ -r localenv ] && . localenv

ARCHIVE_NAME=ieel-$IEEL_VERSION.tar.gz
CHROMA_DIR=${CHROMA_DIR:-"$PWD/chroma/"}
CLUSTER_CONFIG=${CLUSTER_CONFIG:-"$CHROMA_DIR/chroma-manager/tests/framework/gui/selenium_cluster_config.json"}

eval $(python $CHROMA_DIR/chroma-manager/tests/utils/json_cfg2sh.py "$CLUSTER_CONFIG")

MEASURE_COVERAGE=${MEASURE_COVERAGE:-false}
GOOGLE_REPO=${GOOGLE_REPO:-"http://cobbler/cobbler/repo_mirror/google_chrome-stable-x86_64"}  # If not on Toro, can pass in http://dl.google.com/linux/chrome/rpm/stable/x86_64

echo "Beginning installation and setup..."

ssh root@$TEST_RUNNER <<EOF
set -ex
yum install --setopt=retries=50 --setopt=timeout=180 -y unzip tar bzip2 python-devel gcc make tigervnc-server npm git firefox java-1.7.0-openjdk
yum update --setopt=retries=50 --setopt=timeout=180 -y nss

export NODE_PATH=/usr/lib/node_modules
npm i -g npm@latest

if [ ! -z "$GOOGLE_REPO" ]; then
  # Install Google Chrome
  cat << EOC >> /etc/yum.repos.d/google.repo
[google]
name=Google
baseurl=$GOOGLE_REPO
enabled=0
gpgcheck=0
retries=50
timeout=180
EOC
  yum --enablerepo=google install -y google-chrome-stable
fi

# Create a user so we can run the tests as non-root
useradd chromatest
su chromatest <<EOC
mkdir -p ~/.ssh
touch ~/.ssh/authorized_keys
EOC
cat .ssh/id_rsa.pub >> /home/chromatest/.ssh/authorized_keys
cp .ssh/* ~chromatest/.ssh/
chown chromatest.chromatest ~chromatest/.ssh/*
chmod 600 ~chromatest/.ssh/*
EOF

# Copy the repo to the test node (don't want to have to clone every test run - impacts Gerrit)
# We exclude chroma-externals and copy just what we need to reduce the io load on our builders.
(tar -czf - --exclude='chroma/chroma-externals*' .; tar -czf - $(sed -e 's|^|chroma/chroma-externals/|' < chroma/chroma-manager/tests/framework/gui/test_dependencies)) | ssh chromatest@$TEST_RUNNER "mkdir -p chroma_test_env; cd chroma_test_env; tar -xizf -"

ssh chromatest@$TEST_RUNNER <<"EOF"
set -ex

mkdir $HOME/bin

MANAGER_DIR=${MANAGER_DIR:-"$HOME/chroma_test_env/chroma/chroma-manager"}
ZIPLOCK_DIR=${ZIPLOCK_DIR:-"$MANAGER_DIR/ui-modules/node_modules/@intel-js/ziplocker"}
CHROMA_EXTERNALS=${CHROMA_EXTERNALS:-"$HOME/chroma_test_env/chroma/chroma-externals"}
ZIP_INSTALL_DEV=${ZIP_INSTALL_DEV:-"$ZIPLOCK_DIR/bin/zip-install-dev --overrides.ziplockDir=$CHROMA_EXTERNALS"}

cd chroma_test_env/chroma/chroma-manager

# Install npm-based requirements
export ZIP_DEV=true
export NODE_PATH=/usr/lib/node_modules
make ui-modules

PATHS_TO_INSTALL="chroma_ui/"

for install_path in $PATHS_TO_INSTALL
do
    cd $MANAGER_DIR/$install_path
    $ZIP_INSTALL_DEV
done

# Configure VNC server
cd ~
vncpasswd <<EOC
somepassword
somepassword
EOC
EOF

echo "End installation and setup."
