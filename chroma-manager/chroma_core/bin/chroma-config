#!/usr/bin/python
#
# ==============================
# Copyright 2011 Whamcloud, Inc.
# ==============================

try:
    import pymysql
    pymysql.install_as_MySQLdb()
except ImportError:
    pass

import sys
import os
import socket
import errno

sshd_port = 22
bin_dir = os.path.abspath(os.path.dirname(sys.modules['__main__'].__file__))
project_dir = "/usr/share/chroma-manager"
sys.path.append(project_dir)

try:
    from django.core.management import setup_environ
    import settings
    setup_environ(settings)

    from chroma_core.lib.service_config import log, ServiceConfig
except ImportError, e:
    print """%s

Import failed.  Note: this script is only for
use in production mode, not development, requires root
and assumes systemwide installation paths.""" % e
    sys.exit(-1)

# This function is to check that the hostname resolution is configured correctly prior to installing the chroma.
# It checks the the hostname is not localhost. Verifies that the hostname, ip address, FQDN and reverse look up are
# all correct. Then it checks that the ip address is on the machine and active.
# Rabbitmq requires the host name resolution to be working ... if not it dumps python back trace to the user.

def hostname_res():

    try:
        hostname = socket.gethostname()
    except socket.error:
        log.error("Error: Unable to get the servers hostname. Please correct the hostname resolution.")
        sys.exit(-1)

    if (hostname == "localhost"):
        log.error("Error: Currently the hostname is '%s' which is invalid. "
            "Please correct the hostname resolution.",hostname)
        sys.exit(-1)

    try:
        fqdn = socket.getfqdn(hostname)
    except socket.error:
        log.error("Error: Unable to get the FQDN for the server name '%s'. "
            "Please correct the hostname resolution.", hostname)
        sys.exit(-1)

    try:
        ip_address = socket.gethostbyname(hostname)
    except socket.error:
        log.error("Error: Unable to get the ip address for the server name '%s'. "
        "Please correct the hostname resolution.",hostname)
        sys.exit(-1)

    try:
        hostname_from_ip, aliaslist, ipaddr = socket.gethostbyaddr(ip_address)
    except socket.error:
        log.error("Error: Unable to get the host name for ip address: %s. "
            "Please correct the hostname resolution.",ip_address)
        sys.exit(-1)

    if (fqdn != hostname_from_ip):
        log.error("Need to correctly setup hostname resolution. Currently the hostname is: "
            "%s and the ip address hostname is: %s.",fqdn, hostname_from_ip)
        sys.exit(-1)

    # Make sure that the ip address is on the machine. Using port 22 to verify since all machines should
    # have sshd running.
    try:
        tst_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        tst_socket.bind((ip_address, sshd_port))
        tst_socket.close()
    except socket.error,err:
        (err_num, err_msg) = err
        if err_num != errno.EADDRINUSE:
            log.error("Error: Unable to connect to IP address: %s. "
                "Please correct hostname resolution.",ip_address)
            sys.exit(-1)

    return

if __name__ == '__main__':
    cc = ServiceConfig()
    try:
        command = sys.argv[1]
    except IndexError:
        log.error("Usage: %s <setup|validate|start|restart|stop>" % sys.argv[0])
        sys.exit(-1)

    def print_errors(errors):
        if errors:
            log.error("Errors found:")
            for error in errors:
                log.error("  * %s" % error)
        else:
            log.info("OK.")

    if command == 'setup':
        hostname_res()
        def usage():
            log.error("Usage: setup [-v] [username password]")
            sys.exit(-1)

        verbose = False
        args = []
        if len(sys.argv) > 2:
            if sys.argv[2] == "-v":
                cc.verbose = True
                if len(sys.argv) == 5:
                    args = [sys.argv[3], sys.argv[4]]
                elif len(sys.argv) != 3:
                    usage()
            elif len(sys.argv) == 4:
                args = [sys.argv[2], sys.argv[3]]
            else:
                usage()

        log.info("\nStarting the installation...\n")
        errors = cc.setup(*args)
        if errors:
            print_errors(errors)
            sys.exit(-1)
        else:
            log.info("\nThe installation was SUCCESSFUL!\n")
            sys.exit(0)
    elif command == 'validate':
        errors = cc.validate()
        print_errors(errors)
        if errors:
            sys.exit(1)
        else:
            sys.exit(0)
    elif command == 'stop':
        cc.stop()
    elif command == 'start':
        cc.start()
    elif command == 'restart':
        cc.stop()
        cc.start()
    else:
        log.error("Invalid command '%s'" % command)
        sys.exit(-1)
