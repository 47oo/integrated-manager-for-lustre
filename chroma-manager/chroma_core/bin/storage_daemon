#!/usr/bin/env python
#
# ==============================
# Copyright 2011 Whamcloud, Inc.
# ==============================

import sys
import os

bin_dir = os.path.abspath(os.path.dirname(sys.modules['__main__'].__file__))
project_dir = "/" + os.path.join(*(bin_dir.split(os.sep)[0:-2]))
sys.path.append(project_dir)

from django.core.management import setup_environ
import settings
setup_environ(settings)

import signal
import threading
import time

import logging
daemon_log = logging.getLogger('daemon')
daemon_log.setLevel(logging.INFO)

class ServiceThread(threading.Thread):
    def __init__(self, service):
        super(ServiceThread, self).__init__()
        self.service = service

    def run(self):
        try:
            self.service.main_loop()
        except Exception:
            import sys
            import traceback
            exc_info = sys.exc_info()
            backtrace = '\n'.join(traceback.format_exception(*(exc_info or sys.exc_info())))
            daemon_log.warning("Exception in main loop.  backtrace: %s" % backtrace)
            os._exit(-1)

    def stop(self):
        self.service.stop()

def run_main_loop():
    daemon_log.info("Entering main loop")

    # Note: the imports at function scope are deliberate, to avoid things
    # getting initialized before we daemonize
    from chroma_core.lib.storage_plugin.manager import storage_plugin_manager
    errors = storage_plugin_manager.get_errored_plugins()
    if errors:
        daemon_log.error("Cannot start, see storage_plugin.log for more details.")
        daemon_log.error("The following plugins could not be loaded: %s" % errors)
        raise RuntimeError("Some plugins could not be loaded: %s" % errors)

    from chroma_core.lib.storage_plugin.daemon import ScanDaemon, ScanDaemonRpc
    from chroma_core.lib.storage_plugin.daemon import AgentDaemon, AgentDaemonRpc

    scan_daemon = ScanDaemon()
    agent_daemon = AgentDaemon()

    scan_daemon_thread = ServiceThread(scan_daemon)
    scan_rpc_thread = ServiceThread(ScanDaemonRpc(scan_daemon))
    agent_rpc_thread = ServiceThread(AgentDaemonRpc(agent_daemon))
    agent_daemon_thread = ServiceThread(agent_daemon)

    threads = [scan_daemon_thread, agent_daemon_thread, scan_rpc_thread, agent_rpc_thread]
    for thread in threads:
        thread.start()

    stopping = []

    # Respond to Ctrl+C
    def signal_handler(signal, frame):
        daemon_log.info("__main__: Stopping...")
        for thread in threads:
            thread.stop()
        daemon_log.info("__main__: Joining...")
        for thread in threads:
            thread.join()
        daemon_log.info("__main__: Done.")
        stopping.append(True)
    signal.signal(signal.SIGINT, signal_handler)

    while len(stopping) == 0:
        time.sleep(1)
    daemon_log.info("Leaving main loop")

if __name__ == '__main__':
    try:
        foreground = (sys.argv[1] == '-f')
    except IndexError:
        foreground = False

    from chroma_core.lib.service_config import ServiceConfig
    if not ServiceConfig().configured():
        sys.stderr.write("Chroma is not configured, please run chroma-config setup first\n")
        sys.exit(-1)
    else:
        # Close the DB connection so that we get a fresh one
        # for our daemonized process
        from django.db import connection
        connection.close()

    if not foreground:
        PID_FILE = "/var/run/chroma-storage.pid"
        from daemon import DaemonContext
        from daemon.pidlockfile import PIDLockFile

        if os.path.exists(PID_FILE + ".lock") or os.path.exists(PID_FILE):
            pid = int(open(PID_FILE).read())
            try:
                os.kill(pid, 0)
            except OSError:
                # Not running, delete stale PID file
                os.remove(PID_FILE)
                os.remove(PID_FILE + ".lock")
                sys.stderr.write("Removing stale PID file\n")
            else:
                # Running, we should refuse to run
                raise RuntimeError("Daemon is already running (PID %s)" % pid)

        context = DaemonContext(pidfile = PIDLockFile(PID_FILE))
        context.open()
        handler = logging.FileHandler("/var/log/chroma/chroma-storage.log")
        handler.setFormatter(logging.Formatter('[%(asctime)s] %(message)s', '%d/%b/%Y:%H:%M:%S'))
        daemon_log.addHandler(handler)
        daemon_log.info("Starting in the background")
    else:
        from chroma_core.lib.storage_plugin.log import storage_plugin_log
        context = None
        daemon_log.setLevel(logging.DEBUG)
        daemon_log.addHandler(logging.StreamHandler())
        daemon_log.info("Starting in the foreground")
        storage_plugin_log.addHandler(logging.StreamHandler())

    try:
        run_main_loop()
    except Exception, e:
        import sys
        import traceback
        exc_info = sys.exc_info()
        backtrace = '\n'.join(traceback.format_exception(*(exc_info or sys.exc_info())))
        daemon_log.warning("Exception from run_main_loop.  backtrace: %s" % backtrace)
    finally:
        if context:
            context.close()
