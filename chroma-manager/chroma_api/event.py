#
# ========================================================
# Copyright (c) 2012 Whamcloud, Inc.  All rights reserved.
# ========================================================


from tastypie.constants import ALL_WITH_RELATIONS
from tastypie import fields
from tastypie.authorization import DjangoAuthorization

from chroma_core.models.event import Event
from chroma_api.utils import SeverityResource
from chroma_api.authentication import AnonymousAuthentication


class EventResource(SeverityResource):
    """
    Events are messages generated by the Command Center to represent what
    changes on hosts or file systems it monitors.  Events are essentially
    log messages, separate from the ``log`` resource because they are
    internally synthesized rather than gathered from syslog.

    An event is a message generated by the Command Center to indicate a
    change on a host or in a file system being monitored. Events are similar
    to log messages, but do not appear in the log resource because they are
    internally synthesized rather than received via syslog.
    """

    host_name = fields.CharField(
        blank = True,
        null = True,
        help_text = ("The ``label`` attribute of the host on which the event "
                    "occurred, or null if the event is not specific to a "
                    "single host"))

    host = fields.ToOneField(
        'chroma_api.host.HostResource', 'host', null = True,
        help_text = ("The host on which the event occurred, or null if the "
                     "event is not specific to a single host"))

    message = fields.CharField(help_text = ("Human readable description "
                                            "of the event, about one sentence"))

    class Meta:
        queryset = Event.objects.all()
        authorization = DjangoAuthorization()
        authentication = AnonymousAuthentication()
        ordering = ['created_at', 'host', 'host_name']
        filtering = {
                'severity': ['exact', 'in'],
                'host': ALL_WITH_RELATIONS,
                'created_at': ['gte', 'lte', 'gt', 'lt'],
                'dismissed': ['exact']
                }
        list_allowed_methods = ['get']
        detail_allowed_methods = ['get', 'patch']
        always_return_data = True

    def dehydrate_host_name(self, bundle):
        """When sending to API caller, initialize this field."""

        return bundle.obj.host.get_label() if bundle.obj.host else "---"

    def dehydrate_message(self, bundle):
        return bundle.obj.message()

    def build_filters(self, filters = None):
        """Convert HTTP param incoming values to DB types in the filter."""

        custom_filters = {}

        #  Force event_type to lower case
        event_type = filters.get('event_type', None)
        if event_type:
            del filters['event_type']
            custom_filters['content_type__model'] = event_type.lower()

        filters = super(EventResource, self).build_filters(filters)
        filters.update(custom_filters)
        return filters
