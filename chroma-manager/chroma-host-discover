#!/usr/bin/env python
#
# INTEL CONFIDENTIAL
#
# Copyright 2013 Intel Corporation All Rights Reserved.
#
# The source code contained or described herein and all documents related
# to the source code ("Material") are owned by Intel Corporation or its
# suppliers or licensors. Title to the Material remains with Intel Corporation
# or its suppliers and licensors. The Material contains trade secrets and
# proprietary and confidential information of Intel or its suppliers and
# licensors. The Material is protected by worldwide copyright and trade secret
# laws and treaty provisions. No part of the Material may be used, copied,
# reproduced, modified, published, uploaded, posted, transmitted, distributed,
# or disclosed in any way without Intel's prior express written permission.
#
# No license under any patent, copyright, trade secret or other intellectual
# property right is granted to or conferred upon you by disclosure or delivery
# of the Materials, either expressly, by implication, inducement, estoppel or
# otherwise. Any license under such intellectual property rights must be
# express and approved by Intel in writing.


import dbus
import gobject
import avahi
from dbus.mainloop.glib import DBusGMainLoop
import daemon
import daemon.pidlockfile
import sys
import os
bin_dir = os.path.abspath(os.path.dirname(sys.modules['__main__'].__file__))
project_dir = "/" + os.path.join(*(bin_dir.split(os.sep)[0:-2]))
sys.path.append(project_dir)

from django.core.management import setup_environ
import settings
setup_environ(settings)
from chroma_core.models.host import ManagedHost


TYPE = "_chroma-agent._tcp"


def service_resolved(interface, protocol, name, stype, domain, host,
                     aprotocol, address, port, txt, flags):

    hostname = host[0:host.rfind(".")]

    try:
        ManagedHost.create_from_string(hostname)
    except:
        # what, oh what to do, really?
        print "adding host %s failed" % hostname


def print_error(err):
    print err


def myhandler(interface, protocol, name, stype, domain, flags):
    if flags & avahi.LOOKUP_RESULT_LOCAL:
        # local service, skip
        pass

    server.ResolveService(interface, protocol, name, stype, domain,
                          avahi.PROTO_UNSPEC, dbus.UInt32(0),
                          reply_handler=service_resolved,
                          error_handler=print_error)

with daemon.DaemonContext(pidfile = \
           daemon.pidlockfile.PIDLockFile('/var/run/chroma-host-discover.pid')):

    loop = DBusGMainLoop()
    bus = dbus.SystemBus(mainloop=loop)
    server = dbus.Interface(bus.get_object(avahi.DBUS_NAME,
                                           avahi.DBUS_PATH_SERVER),
                            avahi.DBUS_INTERFACE_SERVER)
    b = dbus.Interface(bus.get_object(avahi.DBUS_NAME,
                                      server.ServiceBrowserNew(avahi.IF_UNSPEC,
                                                               avahi.PROTO_UNSPEC,
                                                               TYPE, 'local',
                                                               dbus.UInt32(0))),
                       avahi.DBUS_INTERFACE_SERVICE_BROWSER)
    b.connect_to_signal('ItemNew', myhandler)

    gobject.MainLoop().run()
